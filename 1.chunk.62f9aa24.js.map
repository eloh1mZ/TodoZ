{"version":3,"sources":["webpack:///../node_modules/svelte/store/index.mjs","webpack:///./store/task.js","webpack:///./store/index.js","webpack:///./elements/Field.svelte","webpack:///./components/Greeting.svelte","webpack:///./elements/Task.svelte","webpack:///./components/TasksList.svelte"],"names":["subscriber_queue","writable","value","start","stop","subscribers","set","new_value","run_queue","length","i","s","push","update","fn","subscribe","run","invalidate","subscriber","index","indexOf","splice","list","JSON","parse","localStorage","getItem","setItem","stringify","Task","add","task","Date","now","remove","id","Object","keys","forEach","key","dispatch","e","title","detail","optimalDelta","checked","x","ax","transition","prevPointerX","isPointerDown","Math","abs","ms","date","getFullYear","getMonth","getDay","format","offsetX","tasksList","unsubscribe","v","checkeds"],"mappings":"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","file":"1.chunk.62f9aa24.js","sourcesContent":["import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { writable } from \"svelte/store\"\r\n\r\nlet data = JSON.parse(localStorage.getItem(\"tasks\")) || {}\r\n\r\nconst list = writable(data)\r\nlist.subscribe(value => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(value));\r\n});\r\n\r\nconst add = task => {\r\n    list.update(value => {\r\n        value[Date.now()] = task\r\n        return value\r\n    })\r\n}\r\nconst remove = id => {\r\n    list.update(value => {\r\n        delete value[id]\r\n        return value\r\n    })\r\n}\r\n\r\nconst update = (id, task) => {\r\n    list.update(value => {\r\n        Object.keys(task).forEach(key => {\r\n            value[id][key] = task[key]\r\n        })\r\n        return value\r\n    })\r\n}\r\n\r\nexport default {\r\n\tlist, add, remove, update\r\n}","import task from \"./task\"\r\nexport let Task = task","<script>\r\n\timport { createEventDispatcher } from 'svelte';\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\tlet value = \"\"\r\n\tfunction submit(e) {\r\n\t\tif (!value) return\r\n\t\tdispatch(\"submit\", {\r\n\t\t\tvalue\r\n\t\t})\r\n\t\tvalue = \"\"\r\n\t}\r\n</script>\r\n\r\n<form class=\"field\" on:submit|preventDefault={submit}>\r\n\t<input type=\"text\" class=\"field__input\" bind:value>\r\n\t<button type=\"submit\" class=\"field__btn\">\r\n\t\tAdd\r\n\t</button>\r\n</form>\r\n\r\n<style>\r\n.field {\r\n\tposition: relative;\r\n}\r\n.field__input {\r\n\tall: initial;\r\n\tbox-sizing: border-box;\r\n\tfont: inherit;\r\n\tbackground-color: #fff;\r\n\tpadding: 1em 1.5em;\r\n\twidth: calc(100vw - 2em);\r\n\tmax-width: 600px;\r\n}\r\n.field__btn {\r\n\tposition: absolute;\r\n\tright: 0; top: 0;\r\n\theight: 100%;\r\n\tmin-width: 4em;\r\n\tbackground-color: var(--primary);\r\n\tborder: none;\r\n\toutline: none;\r\n\tcolor: white;\r\n\tfont-weight: 1000;\r\n}\r\n@media (max-width: 600px) {\r\n\t.field__input:focus + .field__btn {\r\n\t\tdisplay: none;\r\n\t}\r\n}\r\n</style>","<script>\r\nimport { Task } from \"../store\"\r\nimport Field from \"@/elements/Field.svelte\"\r\n\r\n\r\nfunction click(e) {\r\n\tTask.add({\r\n\t\ttitle: e.detail.value\r\n\t})\r\n}\r\n\r\n</script>\r\n\r\n<div class=\"greeting\">\r\n\t<h1 class=\"greeting__title\">TodoZ</h1>\r\n\t<Field on:submit={click} />\r\n</div>\r\n\r\n<style>\r\n\t.greeting {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t}\r\n</style>\r\n","<script>\r\nimport { Task } from \"../store\"\r\n\r\nexport let task\r\nexport let id\r\n\r\nlet format = ms => {\r\n\tlet date = new Date(ms)\r\n\treturn `${date.getFullYear()}/${date.getMonth()}/${date.getDay()}`\r\n}\r\n\r\nlet checked = task.checked\r\n\r\nfunction update() {\r\n\tif (checked) task.checked = format(Date.now())\r\n\telse task.checked = false\r\n\tTask.update(id, task)\r\n}\r\n\r\nlet x = 0\r\nlet ax = 0\r\n\r\nlet transition = 0\r\nlet maxDelta = 125\r\nlet optimalDelta = 100\r\n\r\nlet before;\r\n\r\n$: ax = Math.abs(x)\r\n\r\n\r\nlet prevPointerX = 0\r\n\r\n\r\nlet isPointerDown = false\r\n\r\nfunction pointermove(e) {\r\n\tif (!isPointerDown) return\r\n\tif (ax > maxDelta) return\r\n\r\n\tx += e.offsetX - prevPointerX\r\n\r\n\tif (x > 0) x = 0\r\n\r\n\tif (ax > maxDelta) {\r\n\t\tx = x / ax * maxDelta\r\n\t}\r\n}\r\nfunction pointerdown(e) {\r\n\tisPointerDown = true\r\n\tprevPointerX = e.offsetX\r\n\ttransition = 0\r\n}\r\nfunction pointerup(e) {\r\n\tisPointerDown = false\r\n\tx = ax < optimalDelta*.6 ? 0 : (x / ax * optimalDelta)\r\n\ttransition = .25\r\n}\r\n\r\n\r\n</script>\r\n\r\n<article\r\n\tclass={\"task\" + (checked ? \" task--checked\": \"\")}\r\n\ton:pointermove={pointermove}\r\n\ton:pointerdown={pointerdown}\r\n\ton:pointerup={pointerup}\r\n\ton:pointerout={pointerup}\r\n\tstyle={`\r\n\t\t--x: ${x}px;\r\n\t\t--optimal-delta: ${optimalDelta}px;\r\n\t\t--transition: ${transition}s\r\n\t`}\r\n>\r\n\t<label\r\n\t\tclass=\"task__title\"\r\n\t\tfor={id}\r\n\t>{task.title}</label>\r\n\r\n\t<div class=\"checkbox\">\r\n\t\t<input\r\n\t\t\ttype=\"checkbox\"\r\n\t\t\t{id} class=\"checkbox__input visually-hidden\"\r\n\t\t\tbind:checked\r\n\t\t\ton:change={update}\r\n\t\t>\r\n\t\t<span class=\"checkbox__body\"></span>\r\n\t</div>\r\n\r\n\t<button\r\n\t\tclass=\"task__btn task__btn--remove\"\r\n\t\tstyle={x < 0 ? `transform: scaleX(${ax / optimalDelta});` : \"transform: scaleX(0)\"}\r\n\t\ton:click={Task.remove(id)}\r\n\t>Remove</button>\r\n\r\n</article>\r\n\r\n<style>\r\n.task {\r\n\t--red: red;\r\n\t--green: limegreen;\r\n\tposition: relative;\r\n\tmax-width: 600px;\r\n\tmargin: 0 auto;\r\n\tfont-size: 1.2em;\r\n\ttransform: translateX(var(--x));\r\n\ttouch-action: none;\r\n\ttransition: all var(--transition);\r\n\tbackground-color: white;\r\n}\r\n.task--checked {\r\n\topacity: .5;\r\n\ttext-decoration: line-through;\r\n}\r\n.task__title {\r\n\tdisplay: block;\r\n\twidth: 100%;\r\n\tpadding: 1em 2em;\r\n}\r\n.task__btn {\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\tfont: inherit;\r\n\twidth: var(--optimal-delta);\r\n\theight: 100%;\r\n\ttransition: transform var(--transition);\r\n\toutline: none;\r\n\tborder: 0\r\n}\r\n.task__btn--remove {\r\n\tleft: 100%;\r\n\ttransform-origin: left center;\r\n\tbackground-color: var(--red);\r\n\tcolor: white\r\n}\r\n\r\n.checkbox {\r\n\t--size: 1.5rem;\r\n\tposition: absolute;\r\n\ttop: calc(50% - var(--size) / 2);\r\n\tright: 1rem;\r\n}\r\n</style>","<script>\r\nimport { Task } from \"../store\"\r\nimport { onDestroy } from \"svelte\";\r\nimport TaskComponent from \"@/elements/Task.svelte\"\r\n\r\nlet tasksList = {}\r\nlet unsubscribe = Task.list.subscribe(v => {tasksList = v})\r\n\r\nlet checkeds = {}\r\nObject.keys(tasksList).forEach(key => {\r\n\tcheckeds[key] = tasksList[key].checked\r\n})\r\n\r\nonDestroy(() => {\r\n\tunsubscribe()\r\n})\r\n\r\n</script>\r\n\r\n<ul class=\"tasks__list\">\r\n\t{#each Object.keys(tasksList) as id (id)}\r\n\t\t<li class={`tasks__item` + (checkeds[id] ? \" tasks__item--checked\" : \"\")} >\r\n\t\t\t<TaskComponent task={tasksList[id]} {id} />\r\n\t\t</li>\r\n\t{/each}\r\n</ul>\r\n\r\n<style>\r\n.tasks__list {\r\n\tpadding: 0;\r\n\tmargin: 0;\r\n\tlist-style: none;\r\n\toverflow: hidden;\r\n\tdisplay: grid;\r\n\tmargin-top: 2em;\r\n\tgrid-gap: .5em;\r\n}\r\n.tasks__item {\r\n\twidth: 100%;\r\n\tdisplay: block;\r\n}\r\n.tasks__item--checked {\r\n\torder: 100;\r\n}\r\n</style>"],"sourceRoot":""}